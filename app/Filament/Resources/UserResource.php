<?php

namespace App\Filament\Resources;

use App\Enums\allStatus;
use App\Filament\Resources\UserResource\Pages;
use App\Filament\Resources\UserResource\RelationManagers;
use App\Models\Account;
use App\Models\Coordinator;
use App\Models\Marketer;
use App\Models\User;
use Filament\Forms;
use Filament\Forms\Components\Fieldset;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Form;
use Filament\Infolists\Components\Section as ComponentsSection;
use Filament\Infolists\Components\TextEntry;
use Filament\Infolists\Infolist;
use Filament\Resources\Resource;
use Filament\Tables;
use Filament\Tables\Actions\ViewAction;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Columns\ToggleColumn;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\SoftDeletingScope;

class UserResource extends Resource
{
    protected static ?string $model = User::class;

    protected static ?string $navigationIcon = 'heroicon-o-user-group';
    public static function getNavigationGroup(): ?string
    {
        return __('objects.users');
    }
    public static function getNavigationLabel(): string
    {
        return __('objects.admins');
    }

    public static function getNavigationBadge(): ?string
    {
        return static::getModel()::count();// TODO: Change the autogenerated stub
    }
    public static function getNavigationBadgeColor(): string|array|null
    {
        return static::getModel()::count() == 0 ? 'warning' : 'success';// TODO: Change the autogenerated stub
    }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Section::make('Users')
                ->description('Users Data')
                ->schema([
                    TextInput::make('name')
                     ->label(__('labels.name'))
                    ->required()
                    ->minLength(3)
                    ->maxLength(255),
                    TextInput::make('user_phone')
                        ->label(__('labels.phone_number'))
                        ->tel()
                        ->telRegex('/^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\s\.\/0-9]*$/'),
                    Fieldset::make(__('account_data'))
                        ->visibleOn('create')
                        ->relationship('account')
                            ->schema([
                                TextInput::make('email')
                                    ->label(__('labels.email'))
                                    ->email()
                                    ->unique(ignoreRecord: true),
                                TextInput::make('password')
                                    ->label(__('labels.password'))
                                    ->password()
                                    ->confirmed()
                                    ->regex("^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$^")
                                    ->visibleOn('create'),
                                TextInput::make('password_confirmation')
                                    ->label(__('labels.passwordConf'))
                                    ->visibleOn('create')
                                    ->columnSpanFull(),
                            ]),
                    Textarea ::make('user_information')
                        ->label(__('labels.moore_information'))
                        ->placeholder(__('labels.moore_extra'))
                        ->autosize()
                        ->minLength(2)
                        ->maxLength(1024)
                        ->columnSpanFull(),
                ])->columns(2),
            ])->columns(2)

;    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                TextColumn::make('id')
                ->sortable(true)
                ->searchable()
                ->toggleable(isToggledHiddenByDefault:true),
                TextColumn::make('name')
                    ->label(__('labels.name'))
                    ->sortable(true)
                ->searchable()
                ->toggleable(),
                TextColumn::make('account.email')
                    ->label(__('labels.email'))
                ->sortable(true)
                ->searchable()
                ->toggleable(),
                TextColumn::make('user_information')
                    ->label(__('labels.moore_information'))
                    ->limit(60)
                    ->tooltip(function (TextColumn $column): ?string {
                        $state = $column->getState();

                        if (strlen($state) <= $column->getCharacterLimit()) {
                            return null;
                        }

                        // Only render the tooltip if the column content exceeds the length limit.
                        return $state;
                    })
                    ->toggleable(),
                TextColumn::make('account.status')
                    ->label(__('labels.status'))
                    ->badge()
                    ->sortable(true)
                    ->toggleable(),
                TextColumn::make('created_at')
                    ->label(__('labels.created_at'))
                    ->sortable(true)
                    ->toggleable(isToggledHiddenByDefault:true),
                TextColumn::make('updated_at')
                    ->label(__('labels.updated_at'))
                    ->sortable(true)
                    ->toggleable(isToggledHiddenByDefault:true),

            ])
            ->filters([
                //
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
                ViewAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),
                    Tables\Actions\BulkAction::make('block')
                        ->label(__('labels.status_toggle'))
                        ->action(function (Collection $records){
                            $records->each(function ($record){
                                ($record->account->status==allStatus::Active)?$record->account->status=allStatus::Blocked:$record->account->status=allStatus::Active;
                                toggleStatus($record->account->id,$record->account->status);
                            });
                        })
                        ->requiresConfirmation()
                        ->deselectRecordsAfterCompletion()
                        ->icon('heroicon-o-x-circle')
                        ->color('warning')
                        ->modalIcon('heroicon-o-x-circle'),
                ]),
            ])
            ->emptyStateActions([
                Tables\Actions\CreateAction::make(),
            ]);
    }
public static function infolist(Infolist $infolist): Infolist
{
    return $infolist
        ->schema([
            ComponentsSection::make('User Data')
            ->icon('heroicon-m-user')
            ->schema([
                TextEntry::make('name'),
                TextEntry::make('account.email'),
                TextEntry::make('user_phone'),
                TextEntry::make('user_type'),
                TextEntry::make('user_information'),
                TextEntry::make('created_at'),
                TextEntry::make('updated_at'),
            ])->columns(2),
        ]);
}
    public static function getRelations(): array
    {
        return [
            //
        ];
    }
    public static function getEloquentQuery(): Builder
    {
    return parent::getEloquentQuery()->where('user_type', 'admin');
    }
    public static function getPages(): array
    {
        return [
            'index' => Pages\ListUsers::route('/'),
            'create' => Pages\CreateUser::route('/create'),
            'edit' => Pages\EditUser::route('/{record}/edit'),
        ];
    }

    /**
     * @param string|null $modelLabel
     */
    public static function getModelLabel(): string
    {
       return __('labels.admin');
    }

    /**
     * @param string|null $pluralModelLabel
     */
    public static function getPluralModelLabel(): string
    {
        return __('objects.admins');
    }
}

