<?php

namespace App\Filament\Resources;

use App\Enums\allStatus;
use App\Filament\Resources\ClinicResource\Pages;
use App\Filament\Resources\ClinicResource\RelationManagers;
use App\Filament\Resources\CustomerResource\RelationManagers\ClinicsRelationManager;
use App\Models\Clinic;
use App\Models\User;
use App\Policies\ClinicPolicy;
use Filament\Forms;
use Filament\Forms\Components\DatePicker;
use Filament\Forms\Components\Hidden;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Form;
use Filament\Infolists\Components\Section as ComponentsSection;
use Filament\Infolists\Components\TextEntry;
use Filament\Infolists\Infolist;
use Filament\Resources\Resource;
use Filament\Support\Colors\Color;
use Filament\Support\Enums\FontWeight;
use Filament\Tables;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Filters\Filter;
use Filament\Tables\Filters\SelectFilter;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Model;
use Illuminate\Database\Eloquent\SoftDeletingScope;
use Illuminate\Support\Facades\Auth;

class ClinicResource extends Resource
{
    protected static ?string $model = Clinic::class;

    protected static ?string $navigationIcon = 'heroicon-o-rectangle-stack';
    protected static ?int $navigationSort = 2;
     protected static ?string $recordTitleAttribute='name';
    public static function getNavigationGroup(): ?string
    {
        return __('objects.users');
    }
    public static function getNavigationLabel(): string
    {
        return __('objects.clinics');
    }
    public  static function getGloballySearchableAttributes(): array
    {
        return ['name','customer.name']; // TODO: Change the autogenerated stub
    }
    public static function getGlobalSearchResultDetails(Model $record): array
    {
        // TODO: Change the autogenerated stub
        return [
            'customer'=>$record->customer->name
        ] ;
    }
    public static function getNavigationBadge(): ?string
    {
        return static::getModel()::count();// TODO: Change the autogenerated stub
    }
    public static function getNavigationBadgeColor(): string|array|null
    {
        return static::getModel()::count() == 0 ? 'warning' : 'success';// TODO: Change the autogenerated stub
    }
    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Section::make('Clinic')
                    ->description(__('labels.clinic_data'))
                    ->schema([
                        TextInput::make('name')
                            ->label(__('labels.name'))
                            ->required()
                            ->maxLength(255)
                            ->minLength(3),
                        TextInput::make('clinic_phone')
                            ->label(__('labels.phone_number'))
                            ->tel()
                            ->telRegex('/^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\s\.\/0-9]*$/'),
                        \Filament\Forms\Components\Fieldset::make('Account Data')
                         ->label(__('labels.account_data'))
                            ->hiddenOn('edit')
                            ->relationship('account')
                            ->schema([
                                TextInput::make('email')
                                    ->label(__('labels.email'))
                                    ->email()
                                    ->unique(ignoreRecord: true),
                                TextInput::make('password')
                                    ->label(__('labels.password'))
                                    ->required()
                                    ->password()
                                    ->confirmed()
                                    ->default('')
                                    ->regex("^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$^")        ,
                                TextInput::make('password_confirmation')
                                    ->label(__('labels.passwordConf'))
                                    ->required()
                                    ->columnSpanFull(),
                            ]),
                        Select::make('customer_id')
                            ->label(__('labels.customer'))
                            ->relationship('customer','name',modifyQueryUsing: fn (Builder $query) => $query->scopes('active'))
                            ->required()
                            ->searchable()
                            ->preload()
                            ->native(false)
                            ->hiddenOn(ClinicsRelationManager::class),
                        TextInput::make('clinic_location')
                            ->label(__('labels.location'))
                            ->required()
                            ->maxLength(255)
                            ->minLength(2),
                        TextArea ::make('clinic_information')
                            ->label(__('labels.moore_information'))
                            ->placeholder(__('labels.more_extra'))
                            ->autosize()
                            ->minLength(2)
                            ->maxLength(1024)
                            ->columnSpanFull(),
                        Hidden::make('created_at')
                            ->hiddenOn('edit'),
                        Hidden::make('updated_at')
                            ->hiddenOn('create')
                    ])->columns(2),

            ]);
    }
    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                TextColumn::make('id')
                    ->label(__('labels.id'))
                    ->sortable(true)
                    ->searchable()
                    ->toggleable(isToggledHiddenByDefault:true),
                TextColumn::make('name')
                    ->label(__('labels.name'))
                    ->sortable(true)
                    ->searchable()
                    ->toggleable(),
                TextColumn::make('account.email')
                    ->label(__('labels.email'))
                    ->sortable(true)
                    ->searchable()
                    ->toggleable(),
                TextColumn::make('clinic_phone')
                    ->label(__('labels.phone_number'))
                    ->sortable(true)
                    ->searchable()
                    ->toggleable(),
                TextColumn::make('clinic_location')
                    ->label(__('labels.location'))
                    ->sortable(true)
                    ->searchable()
                    ->toggleable(),
                TextColumn::make('customer.name')
                    ->label(__('labels.customer'))
                    ->sortable(true)
                    ->searchable()
                    ->toggleable(),
                TextColumn::make('clinic_information')
                    ->label(__('labels.moore_information'))
                    ->limit(60)
                    ->tooltip(function (TextColumn $column): ?string {
                        $state = $column->getState();

                        if (strlen($state) <= $column->getCharacterLimit()) {
                            return null;
                        }

                        // Only render the tooltip if the column content exceeds the length limit.
                        return $state;
                    })
                    ->toggleable(),
                TextColumn::make('account.status')
                    ->label(__('labels.status'))
                    ->badge()
                    ->sortable(true)
                    ->toggleable(),
                TextColumn::make('campaigns_count')
                    ->counts('campaigns')
                    ->label(__('objects.campaigns'))
                    ->suffix('   '.__('objects.campaigns'))
                    ->color(function ($record)
                    {
                        return ($record->campaigns_count)?'success':'warning';
                    })
                    ->icon(function ($record)
                    {
                        return ($record->campaigns_count)?'heroicon-m-arrow-trending-up':'heroicon-m-arrow-trending-down';
                    })
                    ->sortable(true)
                    ->toggleable(),
                TextColumn::make('coordinators_count')
                    ->counts('coordinators')
                    ->label(__('objects.coordinators'))
                    ->suffix('   '.__('objects.coordinators'))
                    ->color(function ($record)
                    {
                        return ($record->coordinators_count)?'success':'warning';
                    })
                    ->icon(function ($record)
                    {
                        return ($record->coordinators_count>1)?'heroicon-m-user-group':'heroicon-m-user';
                    })
                    ->sortable(true)
                    ->toggleable(),
                TextColumn::make('marketers_count')
                    ->counts('marketers')
                    ->label(__('objects.marketers'))
                    ->suffix('   '.__('objects.marketers'))
                    ->color(function ($record)
                    {
                      return ($record->marketers_count)?'success':'warning';
                    })
                    ->icon(function ($record)
                    {
                        return ($record->marketers_count>1)?'heroicon-m-user-group':'heroicon-m-user';
                    })
                    ->sortable(true)
                    ->toggleable(),
                TextColumn::make('created_at')
                    ->label(__('labels.created_at'))
                    ->sortable(true)
                    ->toggleable(isToggledHiddenByDefault:true),
                TextColumn::make('updated_at')
                    ->label(__('labels.updated_at'))
                    ->sortable(true)
                    ->toggleable(isToggledHiddenByDefault:true),
            ])
            ->filters([


                Filter::make('is_blocked')
                    ->label(__('actions.is_blocked'))
                    ->query(
                        function ($query){
                            return $query->where('account.status',false);
                        }
                    ),
                Filter::make('is_active')
                    ->label(__('actions.is_active'))
                    ->query(
                        function ($query){
                            return $query->where('account.status',true);
                        }
                    ),
                SelectFilter::make('customer')
                    ->label(__('labels.customer'))
                    ->relationship('customer', 'name',(fn (Builder $query) => $query->where('user_type', 'customer')))
                    ->searchable()
                    ->preload()
                ->hiddenOn(ClinicsRelationManager::class),
                Filter::make('created_at')
                    ->form([
                        DatePicker::make('created_from')
                            ->label(__('labels.created_from')),
                        DatePicker::make('created_until')
                            ->label(__('labels.created_until')),
                    ])
                    ->query(function (Builder $query, array $data): Builder {
                        return $query
                            ->when(
                                $data['created_from'],
                                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '>=', $date),
                            )
                            ->when(
                                $data['created_until'],
                                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '<=', $date),
                            );
                    })
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
                Tables\Actions\ViewAction::make(),

            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    Tables\Actions\DeleteBulkAction::make(),

                    Tables\Actions\BulkAction::make('block')
                        ->label(__('labels.status_toggle'))
                        ->action(function (Collection $records){
                            $records->each(function ($record){
                                ($record->account->status==allStatus::Active)?$record->account->status=allStatus::Blocked:$record->account->status=allStatus::Active;
                                toggleStatus($record->account->id,$record->account->status);
                            });
                        })
                        ->requiresConfirmation()
                        ->deselectRecordsAfterCompletion()
                        ->icon('heroicon-o-x-circle')
                        ->color('warning')
                        ->modalIcon('heroicon-o-x-circle'),

                ]),
            ])
            ->emptyStateActions([
                Tables\Actions\CreateAction::make(),
            ]);
    }
    public static function infolist(Infolist $infolist): Infolist
    {
        return $infolist
            ->schema([
                ComponentsSection::make(__('customer_data'))
                    ->icon('heroicon-m-user')
                    ->schema([
                        TextEntry::make('name')
                            ->label(__('labels.name'))
                            ->weight(FontWeight::SemiBold),
                        TextEntry::make('customer.name')
                            ->label(__('labels.customer'))
                            ->weight(FontWeight::SemiBold),
                        TextEntry::make('account.email')
                            ->label(__('labels.email'))
                            ->weight(FontWeight::SemiBold),
                        TextEntry::make('clinic_phone')
                            ->label(__('labels.phone_number'))
                            ->weight(FontWeight::SemiBold),
                        TextEntry::make('clinic_location')
                            ->label(__('labels.location'))
                            ->weight(FontWeight::SemiBold),
                        TextEntry::make('clinic_information')
                            ->label(__('labels.moore_information'))
                            ->weight(FontWeight::SemiBold),
                        TextEntry::make('account.status')
                            ->label(__('labels.status'))
                            ->badge(),
                        TextEntry::make('created_at')
                            ->label(__('labels.created_at'))
                            ->weight(FontWeight::SemiBold),
                        TextEntry::make('updated_at')
                            ->label(__('labels.updated_at'))
                            ->weight(FontWeight::SemiBold),


                    ])->columns(2),
            ]);
    }
    public static function getEloquentQuery(): Builder
    {
        return parent::getEloquentQuery()
            ->orderBy('id','DESC');
    }
    public static function getRelations(): array
    {
        return [
            RelationManagers\CampaignsRelationManager::class,
          RelationManagers\CoordinatorsRelationManager::class,
            RelationManagers\MarketersRelationManager::class,
        ];
    }
    public static function getPages(): array
    {
        return [
            'index' => Pages\ListClinics::route('/'),
            'create' => Pages\CreateClinic::route('/create'),
            'view' => Pages\ViewClinic::route('/{record}'),
            'edit' => Pages\EditClinic::route('/{record}/edit'),
        ];
    }

    /**
     * @param string|null $modelLabel
     */
    public static function getModelLabel(): string
    {
        return __('labels.clinic');
    }

    /**
     * @param string|null $pluralModelLabel
     */
    public static function getPluralModelLabel(): string
    {
        return __('objects.clinics');
    }
}
