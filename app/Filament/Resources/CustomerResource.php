<?php

namespace App\Filament\Resources;

use App\Enums\allStatus;
use App\Filament\Resources\CustomerResource\Pages;
use App\Filament\Resources\CustomerResource\RelationManagers;
use App\Filament\Resources\CustomerResource\RelationManagers\CampaignsRelationManager;
use App\Filament\Resources\CustomerResource\RelationManagers\CoordinatorsRelationManager;
use App\Filament\Resources\CustomerResource\RelationManagers\MarketersRelationManager;
use App\Models\Account;
use App\Models\Coordinator;
use App\Models\Customer;
use App\Models\Marketer;
use App\Models\User;
use Filament\Actions\Action;
use Filament\Forms;
use Filament\Forms\Components\DatePicker;
use Filament\Forms\Components\Group;
use Filament\Forms\Components\Hidden;
use Filament\Forms\Components\Section;
use Filament\Forms\Components\Select;
use Filament\Forms\Components\TextInput;
use Filament\Forms\Components\Textarea;
use Filament\Forms\Form;
use Filament\Infolists\Components\Fieldset;
use Filament\Infolists\Components\Group as ComponentsGroup;
use Filament\Infolists\Components\Section as ComponentsSection;
use Filament\Infolists\Components\TextEntry;
use Filament\Infolists\Infolist;
use Filament\Resources\Resource;
use Filament\Support\Enums\FontWeight;
use Filament\Tables;
use Filament\Tables\Actions\DeleteBulkAction;
use Filament\Tables\Columns\Summarizers\Count;
use Filament\Tables\Columns\Summarizers\Sum;
use Filament\Tables\Columns\TextColumn;
use Filament\Tables\Columns\ToggleColumn;
use Filament\Tables\Filters\Filter;
use Filament\Tables\Table;
use Illuminate\Database\Eloquent\Collection;
use Illuminate\Database\Eloquent\Model;
//use Illuminate\Database\Query\Builder;
use Illuminate\Database\Eloquent\Builder;
use Illuminate\Database\Eloquent\SoftDeletingScope;


class CustomerResource extends Resource
{
    protected static ?string $model = Customer::class;

    protected static ?string $navigationIcon = 'heroicon-o-user-group';

    public static function getNavigationGroup(): ?string
    {
        return __('objects.users');
    }

    public static function getNavigationLabel(): string
    {
        return __('objects.customers');
    }
    protected static ?string $recordTitleAttribute='name';
    public static function getGlobalSearchResultTitle(Model $record): string
    {
        return $record->name;
    }
    public static function getNavigationBadge(): ?string
    {
        return static::getModel()::count();// TODO: Change the autogenerated stub
    }
   public static function getNavigationBadgeColor(): string|array|null
   {
       return static::getModel()::count() == 0 ? 'warning' : 'success';// TODO: Change the autogenerated stub
   }

    public static function form(Form $form): Form
    {
        return $form
            ->schema([
                Section::make(__('customer'))
                    ->label(__('labels.customer'))
                    ->description(__('labels.customer_data'))
                ->schema([
                TextInput::make('name')
                    ->label(__('labels.name'))
                ->required()
                ->maxLength(255)
                ->minLength(3),
                    TextInput::make('user_phone')
                        ->label(__('labels.phone_number'))
                        ->tel()
                        ->telRegex('/^[+]*[(]{0,1}[0-9]{1,4}[)]{0,1}[-\s\.\/0-9]*$/'),
                    \Filament\Forms\Components\Fieldset::make(__('account_data'))
                        ->visibleOn('create')
                        ->relationship('account')
                        ->schema([
                            TextInput::make('email')
                                ->label(__('labels.email'))
                                ->email()
                                 ->unique(ignoreRecord: true),
                            TextInput::make('password')
                                ->label(__('labels.password'))
                                ->required()
                                ->password()
                                ->confirmed()
                                ->default('')
                                ->regex("^(?=.*[A-Za-z])(?=.*\d)[A-Za-z\d]{8,}$^")
                                ->visibleOn('create'),
                            TextInput::make('password_confirmation')
                                ->label(__('labels.passwordConf'))
                                ->visibleOn('create')
                                ->required()
                                ->columnSpanFull(),
                        ]),
                TextArea ::make('user_information')
                    ->label(__('labels.moore_information'))
                    ->placeholder(__('more_extra'))
                ->autosize()
                ->minLength(2)
                ->maxLength(1024)
                ->columnSpanFull(),
                    Hidden::make('created_at')
                        ->hiddenOn('edit'),
                    Hidden::make('updated_at')
                        ->hiddenOn('create')
                ])->columns(2),

            ]);
    }

    public static function table(Table $table): Table
    {
        return $table
            ->columns([
                TextColumn::make('id')
                    ->label(__('labels.id'))
                    ->sortable(true)
                ->searchable()
                ->toggleable(isToggledHiddenByDefault:true),
                TextColumn::make('name')
                    ->label(__('labels.name'))
                ->sortable(true)
                ->searchable()
                ->toggleable(),
                TextColumn::make('account.email')
                    ->label(__('labels.email'))
                    ->sortable(true)
                ->searchable()
                ->toggleable(),
                TextColumn::make('user_phone')
                    ->label(__('labels.phone_number'))
                    ->sortable(true)
                    ->searchable()
                    ->toggleable(),
                TextColumn::make('user_information')
                    ->label(__('labels.moore_information'))
                    ->limit(60)
                    ->tooltip(function (TextColumn $column): ?string {
                        $state = $column->getState();

                        if (strlen($state) <= $column->getCharacterLimit()) {
                            return null;
                        }

                        // Only render the tooltip if the column content exceeds the length limit.
                        return $state;
                    })
                ->toggleable(),
                TextColumn::make('account.status')
                    ->label(__('labels.status'))
                    ->badge()
                ->sortable(true)
                ->toggleable(),
                TextColumn::make('created_at')
                    ->label(__('labels.created_at'))
                    ->sortable(true)
                    ->toggleable(isToggledHiddenByDefault:true),
                TextColumn::make('updated_at')
                    ->label(__('labels.updated_at'))
                    ->sortable(true)
                    ->toggleable(isToggledHiddenByDefault:true),
            ])
            ->filters([
                Filter::make('is_blocked')
                    ->label(__('actions.is_blocked'))
                    ->query(
                        function ($query){
                            return $query->where('account.status',false);
                        }
                    ),
                Filter::make('created_at')
                    ->form([
                        DatePicker::make('created_from')
                            ->label(__('labels.created_from')),
                        DatePicker::make('created_until')
                            ->label(__('labels.created_until')),
                    ])
                    ->query(function (\Illuminate\Database\Eloquent\Builder $query, array $data):\Illuminate\Database\Eloquent\Builder {
                        return $query
                            ->when(
                                $data['created_from'],
                                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '>=', $date),
                            )
                            ->when(
                                $data['created_until'],
                                fn (Builder $query, $date): Builder => $query->whereDate('created_at', '<=', $date),
                            );
                    })
            ])
            ->actions([
                Tables\Actions\EditAction::make(),
                Tables\Actions\ViewAction::make(),
            ])
            ->bulkActions([
                Tables\Actions\BulkActionGroup::make([
                    DeleteBulkAction::make(),
              Tables\Actions\BulkAction::make('block')
                    ->label(__('labels.status_toggle'))
                     ->action(function (Collection $records){
                        $records->each(function ($record){
                            ($record->account->status==allStatus::Active)?$record->account->status=allStatus::Blocked:$record->account->status=allStatus::Active;
                            toggleStatus($record->account->id,$record->account->status);
                        });
                    })
                    ->requiresConfirmation()
                    ->deselectRecordsAfterCompletion()
                    ->icon('heroicon-o-x-circle')
                    ->color('warning')
                    ->modalIcon('heroicon-o-x-circle'),
                ]),
            ])
            ->emptyStateActions([
                Tables\Actions\CreateAction::make(),
            ]);
    }

    public static function infolist(Infolist $infolist): Infolist
    {
        return $infolist
            ->schema([
                ComponentsSection::make(__('labels.customer_data'))
                    ->icon('heroicon-m-user')
                    ->schema([
                        TextEntry::make('name')
                            ->label(__('labels.name'))
                    ->weight(FontWeight::SemiBold),
                        TextEntry::make('account.email')
                            ->label(__('labels.email'))
                            ->weight(FontWeight::SemiBold),
                        TextEntry::make('user_type')
                            ->label(__('labels.user_type'))
                            ->weight(FontWeight::SemiBold),
                        TextEntry::make('user_phone')
                            ->label(__('labels.phone_number'))
                            ->weight(FontWeight::SemiBold),
                        TextEntry::make('user_information')
                            ->label(__('labels.moore_information'))
                            ->weight(FontWeight::SemiBold),
                        TextEntry::make('created_at')
                            ->label(__('labels.created_at'))
                    ->weight(FontWeight::SemiBold),
                        TextEntry::make('updated_at')
                            ->label(__('labels.updated_at'))
                    ->weight(FontWeight::SemiBold),
                    ])->columns(2),
            ]);
    }

    public static function getEloquentQuery(): Builder
    {
        return parent::getEloquentQuery()
            ->orderBy('id','DESC')
            ->withoutGlobalScopes([
                SoftDeletingScope::class,
            ]);
    }
    public static function getRelations(): array
    {
        return [
            RelationManagers\ClinicsRelationManager::class
        ];
    }
    public static function getPages(): array
    {
        return [
            'index' => Pages\ListCustomers::route('/'),
            'create' => Pages\CreateCustomer::route('/create'),
            'view' => Pages\ViewCustomer::route('/{record}'),
            'edit' => Pages\EditCustomer::route('/{record}/edit'),
        ];
    }
    /**
     * @param string|null $modelLabel
     */
    public static function getModelLabel(): string
    {
        return __('labels.customer');
    }

    /**
     * @param string|null $pluralModelLabel
     */
    public static function getPluralModelLabel(): string
    {
        return __('objects.customers');
    }
}
